#VETORES
#criação
a = c(2,3,4,5)
#OBS: ai colocar um vetor  que mistura numeros e strings  os numeros são convertidos em strings
# e pra converte-lo em um vetor numeros usa-se a função "as.numeric"
a
#OBS: ai colocar um vetor  que mistura numeros e strings  os numeros são convertidos em strings
# e pra converte-lo em um vetor numeros usa-se a função "as.numeric"
a[1] = 'a1'
a
as.numeric(a)
as.numeric(a[2:4])
as.numeric(a[2:4]) # nesse caso oque seria "NA" não foi incluido
a = c(c(1,2,3),4,5,6)
a
?scan
# obs:ambas formas dão o mesmo resultado e o "c" é obrigatorio
c = scan()
# obs:ambas formas dão o mesmo resultado e o "c" é obrigatorio
c = scan()
# obs:ambas formas dão o mesmo resultado e o "c" é obrigatorio
c = scan()
# obs:ambas formas dão o mesmo resultado e o "c" é obrigatorio
c = scan(what = integer())
c = scan(nmax = 99)
#OBS: Vale por ultimo ressaltar que todos
class(4)
#OBS: Vale por ultimo ressaltar que todos
class(4.1)
#Para ele ser considerado um inteiro (ou integer)
as.integer(3)
#Para ele ser considerado um inteiro (ou integer) pode-se usar a função "as.integer()"
inteiro = as.integer(9)
class(inteiro)
#ou colocar um "L" após o número (precisa ser maiusculo)
inteiro = 9L
class(intei)
class(inteiro)
as.vector(c(1,23))
class(as.vector(c(1,23)))
b = 1
names(b)
names(b) = 'adad'
b
#NOMEANDO
#é possivel nomear variaveis de qualquer tipo no R
b = 1
#sendo que em variaveis de 1 dimensão o nome é dado ao elemente já em variaveis com
#mais dimensões os nomes são dados as linhas colunas ou matrizes
matriz = matrix(0,3,3)
matriz
names(matriz)
names(matriz) = (c('l1','l2','l3','c1','c2','c3'))
matriz
matriz
matriz = matrix(0,3,3)
names(matriz) = (c('l1','l2','l3','c1','c2','c3'))
matriz
#sendo que em variaveis de 1 dimensão o nome é dado aos elementos
matriz = matrix(0,3,3)
#sendo que em variaveis de 1 dimensão o nome é dado aos elementos
matriz = matrix(0,3,2)
names(matriz) = c('e1','e2','e3','e4','e4','e6')
matriz
#sendo que em variaveis de 1 dimensão o nome é dado aos elementos
vetor = 1:3
names(vetor) = c('e1','e2','e3')
vetor
vetor['e2']
#OBS: também é possivel acessar os elementos de um vetor pelo seu nome
vetor['e2']
#VALE RESSALTAR QUE:
#O R considera todos os tipos de dados como vetores
1
#VALE RESSALTAR QUE:
#O R considera todos os tipos de dados como vetores
is.vector(1)
is.vector(T)
1T
is.vector(T)
#por isso que o ouput do terminal sempre mostra o indice dos elementos mesmo em numeros ou strings
num = 99
num[4]
num[2:4]=1
num#(pq tecnicamente ele já é um vetor)
num[T]
num[c(F,F,T,F)]
num[c(F,F,T)]# mostra só o 3 elemento
num[c(F,F)]# mostra só o 3 elemento
num[c(F,F,T)]# mostra só o 3 elemento
l = b == 'antes existe NA'
l
#VETORES
#criação
a = c(2,3,4,5)
#VETORES
#criação
a = c(2,3,4,5,66,-1)
#realizar uma operação entre um vetor e uma constante retorna um vetor com kda elemento
#submetido aquela operação
#OBS:lembrar da regra usada com a modificão de vetores quando o vetor modificador é mutiplo
#pois ela também é valida nas operações entre vetores
a*(1,2,3)
#realizar uma operação entre um vetor e uma constante retorna um vetor com kda elemento
#submetido aquela operação
#OBS:lembrar da regra usada com a modificão de vetores quando o vetor modificador é mutiplo
#pois ela também é valida nas operações entre vetores
a*c(1,2,3)
#realizar uma operação entre um vetor e uma constante retorna um vetor com kda elemento
#submetido aquela operação
#OBS:lembrar da regra usada com a modificão de vetores quando o vetor modificador é mutiplo
#pois ela também é valida nas operações entre vetores
a*c(1,2,3,0)
c(1,T)
T==T
T==F
#Criação
#usando vetores
fator2 = c(1,2,3,1,1,2,2,2,2,4,4)
fator2
#Criação
#usando vetores
fator = as.factor('A','B','C')
#Criação
#usando vetores
fator = as.factor(c('A','B','C'))
fator
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)
#Criação
#usando vetores
fator = as.factor(c('K','B','C'))
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)# usando isso é possivel saber qual a ordem dos leveis pelo respectivo numero após o ":"
#Criação
#usando vetores
fator = as.factor(c('K','B','C'))
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)# usando isso é possivel saber qual a ordem dos leveis pelo respectivo numero após o ":"
#Criação
#usando vetores
fator = as.factor(c('Z','B','C'))
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)# usando isso é possivel saber qual a ordem dos leveis pelo respectivo numero após o ":"
#Criação
#usando vetores
fator = as.factor(c('A','B','C'))
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)# usando isso é possivel saber qual a ordem dos leveis pelo respectivo numero após o ":"
#"A" é o primeiro level "B" o segundo e "C" o terceiro
summary(fator)
#Criação
#usando vetores
fator = as.factor(c('A','B','C'.'A'))
#Criação
#usando vetores
fator = as.factor(c('A','B','C','A'))
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)# usando isso é possivel saber qual a ordem dos leveis pelo respectivo numero após o ":"
#"A" é o primeiro level "B" o segundo e "C" o terceiro
summary(fator)
#Criação
#usando vetores
fator = as.factor(c('A','B','C','B'))
#Usando funçoes
fator = factor(c('1','2','3','1','1','2','2','2','2'))# esse fator uma vez definido so vai aceitar valores '1' '2' e '3'
#"A" é o primeiro level "B" o segundo e "C" o terceiro
summary(fator) # diz quantos elementos de cada level existem
fator = factor(c('1','2','3','1','1','2','2','2','2'),ordered = T)
fator
fator = factor(c('A','A','B','B','B','C'),ordered = T)
fator
fator = factor(c('A','A','B','B','B','C','C','C'),ordered = T)
fator
fator = factor(c('A','A','B','B','B','C','C','C'),ordered = TRUE)
fator
fator = factor(c('A','A','B','B','B','C','C','C'),ordered = FALSE)
fator
fator = factor(c('A','A','B','B','B','B','C','C','C'),ordered = FALSE)
fator
fator = factor(c('A','A','B','B','B','B','C','C','C'),ordered = TRUE)
fator
fator = factor(c('A','A','B','B','B','B','C','C','C','B'),ordered = TRUE)
fator = factor(c('A','A','B','B','B','B','C','C','C','B'),ordered = TRUE)
fator
#"A" é o primeiro level "B" o segundo e "C" o terceiro
summary(fator) # diz quantos elementos de cada level existem
fator[1] = '2'
fator
fator = factor(c('A','A','B','B','B','B','C','C','C','B'),ordered = TRUE)
fator
fator[1]>fator[2]
cat()
for (c in 1:10){
paste(c)
}
cat(c)
for (c in c(1:10)){
cat(c)
}
print('')
for (c in c(1:10)){
cat(c)
print('')
}
desvio = function(vet){
i = 1
media  = mean(vet)
while (i != length(vet)){
vet[i] = (vet[1]-media)**2
i = i+1
}
return (sqrt(sum(vet)/length(vet)))
}
sd(1:10)
desvio(1:10)
return (sqrt(*sum(vet)/length(vet))))
return (sqrt(sum(vet)/length(vet))) }
return (sqrt(sum(vet)/length(vet))) }
return (sqrt(sum(vet)/length(vet)))
desvio = function(vet){
i = 1
media  = mean(vet)
while (i != length(vet)){
vet[i] = (vet[1]-media)**2
i = i+1
}
return (sqrt(sum(vet)/length(vet)))
}
desvio = function(vet){
i = 1
media  = mean(vet)
while (i != length(vet)){
vet[i] = (vet[1]-media)**2
i = i+1
}
return (sqrt(sum(vet)/length(vet)))
}
sd(1:10)
desvio(1:10)
sd(1:20)
desvio(1:20)
desvio = function(vet){
i = 1
media  = mean(vet)
while (i != length(vet)){
vet[i] = (vet[1]-media)**2
i = i+1
}
return (sqrt(sum(vet)/length(vet)))
}
sd(1:20)
desvio(1:20)
desvio = function(vet){
i = 1
media  = mean(vet)
while (i != length(vet)){
vet[i] = (vet[i] - media)**2
i = i+1
}
return (sqrt(sum(vet)/length(vet)))
}
desvio(1:20)
sd(1:20)
desvio(1:10)
sd(1:10)
desvio = function(vet){
i = 1
media  = mean(vet)
while (i != length(vet)){
vet[i] = (vet[i] - media)**2
i = i+1
}
return c((sqrt(sum(vet)/length(vet))),i )
}
desvio = function(vet){
i = 1
media  = mean(vet)
while (i != length(vet)){
vet[i] = (vet[i] - media)**2
i = i+1
}
return (c(sqrt(sum(vet)/length(vet))),i )
}
sd(1:10)
desvio(1:10)
desvio = function(vet){
i = 1
media  = mean(vet)
while (i != length(vet)){
vet[i] = (vet[i] - media)**2
i = i+1
}
return (i)
}
desvio(1:10)
desvio = function(vet){
i = 0
media  = mean(vet)
while (i != length(vet)){
i = i+1
vet[i] = (vet[i] - media)**2
}
return (sqrt(sum(vet)/length(vet)))
}
desvio(1:10)
sd(1:10)
variance(1:10)
deviance(1:10)
s^2(1:10)
var(1:10)
desvio = function(vet){
variancia = var(vet)
return (sqrt(variancia))
}
sd(1:10)
desvio(1:10)
install.packages("forcats",dependencies = T)
library("forcasts")
library(forcats)
detach("package:forcats", unload = TRUE)
library(forcats)
f = as.factor(c(1,2,3,4,5,6,7,8))
f
fct_collapse(f,par=c(1,3,5,7),impar=c(2,4,6,8))
f = fct_collapse(f,par=c(1,3,5,7),impar=c(2,4,6,8))
f = as.factor(c('a','b','c','d','e','f','g'))
f = as.factor(c('a','b','c','d','e','f','g','u'))
f = fct_collapse(f,vogal = c('a','e','u'), consoante=c('b','c','d','f','g'))
f
f = as.factor(c('a','b','c','d','e','f','g'))
f = fct_collapse(f,vogal = c('a','e','u'), consoante=c('b','c','d','f','g'))
detach("package:forcats", unload = TRUE)
f = fct_collapse(f,vogal = c('a','e','u'), consoante=c('b','c','d','f','g'))
alunos = function(alunos_dataframe,linha){
linha_somada = linha
resp = ''
while (resp != 'n') {
alunos_dataframe[linha_somada,1] = resposta <- readline(prompt = 'digite seu nome:')
alunos_dataframe[linha_somada,2] <- as.factor(readline(prompt = "Digite seu sexo: [M/F]"))
for (c in 1:3){
cat( "Digite sua ",c, ' nota')
alunos_dataframe[linha_somada,2+c] = as.numeric(resposta <- readline(prompt =  ""))
}
alunos_dataframe[linha_somada,6] = round(mean(c(alunos_dataframe[linha_somada,3],
alunos_dataframe[linha_somada,4],
alunos_dataframe[linha_somada,5])),2)
alunos_dataframe[linha_somada,7] = alunos_dataframe[linha,6]>=7
cat('A média do aluno foi: ',alunos_dataframe[linha_somada,6])
print('')
if(alunos_dataframe[linha_somada,7]){
print('ALUNO APROVADO')
}else{
print('ALUNO REPROVAOD')
}
linha_somada = linha_somada+1
resp =  readline(prompt = 'Quer continuar? [S/N]')
}
return(alunos_dataframe)
}
relacao = data.frame(matrix(NA,ncol = 7))
names(relacao) = c('NOME','SEXO','NOTA1','NOTA2','NOTA3','MEDIA','APROVADO')
relacao
relacao[,c(3,4,5)] = as.numeric(relacao[,c(3,4,5)])
relacao = alunos(relacao,1)
N
relacao
relacao = data.frame(matrix(NA,ncol = 7))
names(relacao) = c('NOME','SEXO','NOTA1','NOTA2','NOTA3','MEDIA','APROVADO')
relacao[,c(3,4,5)] = as.numeric(relacao[,c(3,4,5)])
relacao[,2] = as.factor(relacao[,2])
relacao = alunos(relacao,1)
relacao
relacao[,c(3,4,5)] = as.numeric(relacao[,c(3,4,5)])
relacao = alunos(relacao,1)
