#VETORES
#criação
a = c(2,3,4,5)
#OBS: ai colocar um vetor  que mistura numeros e strings  os numeros são convertidos em strings
# e pra converte-lo em um vetor numeros usa-se a função "as.numeric"
a
#OBS: ai colocar um vetor  que mistura numeros e strings  os numeros são convertidos em strings
# e pra converte-lo em um vetor numeros usa-se a função "as.numeric"
a[1] = 'a1'
a
as.numeric(a)
as.numeric(a[2:4])
as.numeric(a[2:4]) # nesse caso oque seria "NA" não foi incluido
a = c(c(1,2,3),4,5,6)
a
?scan
# obs:ambas formas dão o mesmo resultado e o "c" é obrigatorio
c = scan()
# obs:ambas formas dão o mesmo resultado e o "c" é obrigatorio
c = scan()
# obs:ambas formas dão o mesmo resultado e o "c" é obrigatorio
c = scan()
# obs:ambas formas dão o mesmo resultado e o "c" é obrigatorio
c = scan(what = integer())
c = scan(nmax = 99)
#OBS: Vale por ultimo ressaltar que todos
class(4)
#OBS: Vale por ultimo ressaltar que todos
class(4.1)
#Para ele ser considerado um inteiro (ou integer)
as.integer(3)
#Para ele ser considerado um inteiro (ou integer) pode-se usar a função "as.integer()"
inteiro = as.integer(9)
class(inteiro)
#ou colocar um "L" após o número (precisa ser maiusculo)
inteiro = 9L
class(intei)
class(inteiro)
as.vector(c(1,23))
class(as.vector(c(1,23)))
b = 1
names(b)
names(b) = 'adad'
b
#NOMEANDO
#é possivel nomear variaveis de qualquer tipo no R
b = 1
#sendo que em variaveis de 1 dimensão o nome é dado ao elemente já em variaveis com
#mais dimensões os nomes são dados as linhas colunas ou matrizes
matriz = matrix(0,3,3)
matriz
names(matriz)
names(matriz) = (c('l1','l2','l3','c1','c2','c3'))
matriz
matriz
matriz = matrix(0,3,3)
names(matriz) = (c('l1','l2','l3','c1','c2','c3'))
matriz
#sendo que em variaveis de 1 dimensão o nome é dado aos elementos
matriz = matrix(0,3,3)
#sendo que em variaveis de 1 dimensão o nome é dado aos elementos
matriz = matrix(0,3,2)
names(matriz) = c('e1','e2','e3','e4','e4','e6')
matriz
#sendo que em variaveis de 1 dimensão o nome é dado aos elementos
vetor = 1:3
names(vetor) = c('e1','e2','e3')
vetor
vetor['e2']
#OBS: também é possivel acessar os elementos de um vetor pelo seu nome
vetor['e2']
#VALE RESSALTAR QUE:
#O R considera todos os tipos de dados como vetores
1
#VALE RESSALTAR QUE:
#O R considera todos os tipos de dados como vetores
is.vector(1)
is.vector(T)
1T
is.vector(T)
#por isso que o ouput do terminal sempre mostra o indice dos elementos mesmo em numeros ou strings
num = 99
num[4]
num[2:4]=1
num#(pq tecnicamente ele já é um vetor)
num[T]
num[c(F,F,T,F)]
num[c(F,F,T)]# mostra só o 3 elemento
num[c(F,F)]# mostra só o 3 elemento
num[c(F,F,T)]# mostra só o 3 elemento
l = b == 'antes existe NA'
l
#VETORES
#criação
a = c(2,3,4,5)
#VETORES
#criação
a = c(2,3,4,5,66,-1)
#realizar uma operação entre um vetor e uma constante retorna um vetor com kda elemento
#submetido aquela operação
#OBS:lembrar da regra usada com a modificão de vetores quando o vetor modificador é mutiplo
#pois ela também é valida nas operações entre vetores
a*(1,2,3)
#realizar uma operação entre um vetor e uma constante retorna um vetor com kda elemento
#submetido aquela operação
#OBS:lembrar da regra usada com a modificão de vetores quando o vetor modificador é mutiplo
#pois ela também é valida nas operações entre vetores
a*c(1,2,3)
#realizar uma operação entre um vetor e uma constante retorna um vetor com kda elemento
#submetido aquela operação
#OBS:lembrar da regra usada com a modificão de vetores quando o vetor modificador é mutiplo
#pois ela também é valida nas operações entre vetores
a*c(1,2,3,0)
c(1,T)
T==T
T==F
#Criação
#usando vetores
fator2 = c(1,2,3,1,1,2,2,2,2,4,4)
fator2
#Criação
#usando vetores
fator = as.factor('A','B','C')
#Criação
#usando vetores
fator = as.factor(c('A','B','C'))
fator
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)
#Criação
#usando vetores
fator = as.factor(c('K','B','C'))
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)# usando isso é possivel saber qual a ordem dos leveis pelo respectivo numero após o ":"
#Criação
#usando vetores
fator = as.factor(c('K','B','C'))
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)# usando isso é possivel saber qual a ordem dos leveis pelo respectivo numero após o ":"
#Criação
#usando vetores
fator = as.factor(c('Z','B','C'))
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)# usando isso é possivel saber qual a ordem dos leveis pelo respectivo numero após o ":"
#Criação
#usando vetores
fator = as.factor(c('A','B','C'))
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)# usando isso é possivel saber qual a ordem dos leveis pelo respectivo numero após o ":"
#"A" é o primeiro level "B" o segundo e "C" o terceiro
summary(fator)
#Criação
#usando vetores
fator = as.factor(c('A','B','C'.'A'))
#Criação
#usando vetores
fator = as.factor(c('A','B','C','A'))
#OBS: como os elementos de um fator não são usados para calculos mesmo os numeros podem ser usados em
#forma de string
str(fator)# usando isso é possivel saber qual a ordem dos leveis pelo respectivo numero após o ":"
#"A" é o primeiro level "B" o segundo e "C" o terceiro
summary(fator)
#Criação
#usando vetores
fator = as.factor(c('A','B','C','B'))
#Usando funçoes
fator = factor(c('1','2','3','1','1','2','2','2','2'))# esse fator uma vez definido so vai aceitar valores '1' '2' e '3'
#"A" é o primeiro level "B" o segundo e "C" o terceiro
summary(fator) # diz quantos elementos de cada level existem
fator = factor(c('1','2','3','1','1','2','2','2','2'),ordered = T)
fator
fator = factor(c('A','A','B','B','B','C'),ordered = T)
fator
fator = factor(c('A','A','B','B','B','C','C','C'),ordered = T)
fator
fator = factor(c('A','A','B','B','B','C','C','C'),ordered = TRUE)
fator
fator = factor(c('A','A','B','B','B','C','C','C'),ordered = FALSE)
fator
fator = factor(c('A','A','B','B','B','B','C','C','C'),ordered = FALSE)
fator
fator = factor(c('A','A','B','B','B','B','C','C','C'),ordered = TRUE)
fator
fator = factor(c('A','A','B','B','B','B','C','C','C','B'),ordered = TRUE)
fator = factor(c('A','A','B','B','B','B','C','C','C','B'),ordered = TRUE)
fator
#"A" é o primeiro level "B" o segundo e "C" o terceiro
summary(fator) # diz quantos elementos de cada level existem
fator[1] = '2'
fator
fator = factor(c('A','A','B','B','B','B','C','C','C','B'),ordered = TRUE)
fator
fator[1]>fator[2]
